import{_ as o,W as t,X as n,Y as s,Z as e,$ as i,a1 as r,a0 as a,C as d}from"./framework-c8ebc670.js";const c={},p=a(`<h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h2><div class="language-ahk line-numbers-mode" data-ext="ahk"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">showPluginMode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">pluginSearchData</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">searchHandler</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">runHandler</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">:=</span><span style="color:#ABB2BF;"> {})</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="类型" tabindex="-1"><a class="header-anchor" href="#类型" aria-hidden="true">#</a> 类型</h2><p>静态方法</p><h2 id="说明" tabindex="-1"><a class="header-anchor" href="#说明" aria-hidden="true">#</a> 说明</h2>`,5),h=a(`<h2 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h2><ul><li>{Array} <code>pluginSearchData</code>: <strong>必填参数</strong>，用于插件模式搜索的数据。</li><li>{(that, searchText) =&gt; any} <code>searchHandler</code>: <strong>必填参数</strong>，插件模式搜索处理函数，<strong>额外说明见下方</strong>。</li><li>{(that, searchText) =&gt; any} <code>runHandler</code>: <strong>必填参数</strong>，插件模式回车、双击任意项时的处理函数。</li><li>{Object} <code>options</code>: 可选参数，<strong>具体使用见下方说明</strong>。</li></ul><h3 id="options-中可选参数的说明" tabindex="-1"><a class="header-anchor" href="#options-中可选参数的说明" aria-hidden="true">#</a> options 中可选参数的说明</h3><ul><li><p><code>doubleRightHandler</code>（可选）{(that, rowNum) =&gt; void}</p><ul><li>插件模式双击 Right 键时的处理函数，<code>rowNum</code> 为当前选中项的行号。</li></ul></li><li><p><code>loadImgsHandler</code>（可选）{(that) =&gt; void}</p><ul><li>加载插件模式图片的处理函数，若需要显示图标一定要带有此参数。</li></ul></li><li><p><code>toBottomHandler</code>（可选）{(that) =&gt; void}</p><ul><li>列表最后一行可见（触底）处理函数。</li></ul></li><li><p><code>pasteContentHandler</code>（可选）{(that, typeName, content?) =&gt; bool}</p><ul><li><code>Ctrl + V</code> 粘贴内容时的处理函数，如果粘贴的是 bitmap 或者 file 类型，需要额外特殊处理，<strong>具体使用见下方说明</strong>。</li></ul></li><li><p><code>dropFilesHandler</code>（可选）{(that, fileList, pre) =&gt; bool}</p><ul><li>拖入文件到搜索框的处理函数，<strong>具体使用见下方说明</strong>。</li></ul></li><li><p><code>initHandler</code>（可选）{(that) =&gt; void}</p><ul><li>初始化处理函数，在进入插件模式后被调用。</li></ul></li><li><p><code>searchText</code>（可选）: 启动时设置搜索框文本。</p></li><li><p><code>placeholder</code>（可选）: 设置搜索框占位符。</p></li><li><p><code>thumb</code>（可选）: hICON，设置插件模式搜索框图标。</p></li></ul><h3 id="searchHandler" tabindex="-1"><a class="header-anchor" href="#searchHandler" aria-hidden="true">#</a> searchHandler 处理函数说明</h3><div class="language-ahk line-numbers-mode" data-ext="ahk"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">that</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">searchText</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">any</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为规范使用，请将搜索结果存放至 that.pluginSearchResult 然后对其进行渲染（添加到 listview）。</p><h3 id="pastecontenthandler" tabindex="-1"><a class="header-anchor" href="#pastecontenthandler" aria-hidden="true">#</a> pasteContentHandler 处理函数说明</h3><ul><li><p>函数形式:</p><ol><li><code>(that, typeName) =&gt; bool</code></li><li><code>(that, typeName, content) =&gt; any</code></li></ol></li><li><p>函数返回值:</p><ol><li>在粘贴<strong>bitmap/file</strong>内容前会以形式一调用，则需要返回一个布尔值，表示是否允许进行粘贴操作（一般可以通过 typeName 判断是否是需要支持的粘贴内容）。</li><li>在粘贴<strong>bitmap/file</strong>内容后还会以形式二调用，作为粘贴完成的通知</li></ol></li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>typeName: file 则 content为文件路径数组 {Array}</p><p>typeName: bitmap 则 content为位图句柄 hBitmap {Int}</p></div><h3 id="dropFilesHandler" tabindex="-1"><a class="header-anchor" href="#dropFilesHandler" aria-hidden="true">#</a> dropFilesHandler 处理函数说明</h3><ul><li><p>函数形式:</p><ol><li><code>(that, fileList, true) =&gt; bool</code></li><li><code>(that, fileList, false) =&gt; any</code></li></ol></li><li><p>函数返回值:</p><ol><li>在拖入文件后会以形式一触发，则需要返回一个布尔值，表示是否允许拖入操作生效。</li><li>拖入生效后还会以形式二触发，作为拖入生效的通知。</li></ol></li></ul>`,12);function u(g,B){const l=d("RouterLink");return t(),n("div",null,[p,s("p",null,[e("启动插件模式。参考"),i(l,{to:"/dev/plugin-mode/"},{default:r(()=>[e("插件模式")]),_:1}),e("。")]),h])}const m=o(c,[["render",u],["__file","showPluginMode.html.vue"]]);export{m as default};
