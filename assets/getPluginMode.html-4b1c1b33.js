import{_ as e,W as a,X as n,a0 as d}from"./framework-c8ebc670.js";const s={},i=d(`<h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h2><div class="language-ahk line-numbers-mode" data-ext="ahk"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">getPluginMode</span><span style="color:#ABB2BF;">(*)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="类型" tabindex="-1"><a class="header-anchor" href="#类型" aria-hidden="true">#</a> 类型</h2><p>静态函数</p><h2 id="说明" tabindex="-1"><a class="header-anchor" href="#说明" aria-hidden="true">#</a> 说明</h2><p>返回 <code>PluginMode</code> 类</p><p>特定情况下需要提前获取到PluginMode，即所谓的that。</p><h2 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h2><ul><li><code>*</code>: 具体使用时可以传入任何参数，此参数在该函数中没有任何用途。</li></ul><h2 id="返回值-pluginmode" tabindex="-1"><a class="header-anchor" href="#返回值-pluginmode" aria-hidden="true">#</a> 返回值 {PluginMode}</h2><p>返回 <code>PluginMode</code> 类</p>`,11),r=[i];function o(l,c){return a(),n("div",null,r)}const h=e(s,[["render",o],["__file","getPluginMode.html.vue"]]);export{h as default};
