import{_ as o,W as n,X as r,Y as l,Z as e,$ as t,a0 as a,C as s}from"./framework-c8ebc670.js";const c={},d=a('<h2 id="chinesefirstchar-str" tabindex="-1"><a class="header-anchor" href="#chinesefirstchar-str" aria-hidden="true">#</a> chineseFirstChar(str)</h2><p>将文本的中文部分转换为拼音首字母，多音字转换不准确</p><ul><li><p>参数</p><ul><li>{String} <code>str</code>: 要进行转换的文本</li></ul></li><li><p>返回值</p><ul><li>{String} 将中文部分转为拼音首字母后的字符串</li></ul></li></ul><h2 id="strstartwith-ori-sub-casesense-false" tabindex="-1"><a class="header-anchor" href="#strstartwith-ori-sub-casesense-false" aria-hidden="true">#</a> strStartWith(ori, sub, caseSense := false)</h2><p>ori是否以sub开头</p><ul><li><p>参数</p><ul><li>{String} <code>ori</code>: 进行判断的文本</li><li>{String} <code>sub</code>: 开头的文本</li><li>{Bool} <code>caseSense</code>: 是否大小写敏感</li></ul></li><li><p>返回值</p><ul><li>{Bool} <code>true</code> 则 ori 以 sub 开头</li></ul></li></ul><h2 id="pathstrcompact-fullpath-maxchars" tabindex="-1"><a class="header-anchor" href="#pathstrcompact-fullpath-maxchars" aria-hidden="true">#</a> pathStrCompact(fullPath, maxChars)</h2><p>压缩文件路径文本，使其不超过最大字符数</p><ul><li><p>参数</p><ul><li>{String} <code>fullPath</code>: 文件完整路径</li><li>{Number} <code>maxChars</code>: 压缩后最大字符数</li></ul></li><li><p>返回值</p><ul><li>{String} 压缩后的文件路径文本</li></ul></li></ul><h2 id="copytoclipboard-filepath-cut-false" tabindex="-1"><a class="header-anchor" href="#copytoclipboard-filepath-cut-false" aria-hidden="true">#</a> copyToClipboard(filePath, cut := false)</h2><p>复制指向文件的路径到剪切板，可选择进行剪切而不是复制</p><ul><li><p>参数</p><ul><li>{String} <code>filePath</code>: 指向文件的路径</li><li>{Bool} <code>cut</code>: 是否剪切，默认为 <code>false</code></li></ul></li><li><p>返回值</p><ul><li>无</li></ul></li></ul><h2 id="startfile-path-workingdir-options-beforerun" tabindex="-1"><a class="header-anchor" href="#startfile-path-workingdir-options-beforerun" aria-hidden="true">#</a> startFile(path, workingDir := &quot;&quot;, options := &quot;&quot;, beforeRun?)</h2><p>运行指定路径的文件</p>',14),p=l("p",null,"参数",-1),u=l("li",null,[e("{String} "),l("code",null,"path"),e(": 文件路径")],-1),h=l("code",null,"workingDir",-1),f={href:"https://orz707.gitee.io/v2/docs/commands/Run.htm",target:"_blank",rel:"noopener noreferrer"},g=l("code",null,"options",-1),m={href:"https://orz707.gitee.io/v2/docs/commands/Run.htm",target:"_blank",rel:"noopener noreferrer"},b={href:"https://orz707.gitee.io/v2/docs/Functions.htm#closures",target:"_blank",rel:"noopener noreferrer"},_=l("code",null,"beforeRun",-1),B=l("li",null,[l("p",null,"返回值 {String}"),l("ul",null,[l("li",null,"PID 如果无法确定 PID, 返回空字符串")])],-1),y=a('<h2 id="openfileinfolder-path" tabindex="-1"><a class="header-anchor" href="#openfileinfolder-path" aria-hidden="true">#</a> openFileInFolder(path)</h2><p>在资源管理器中显示指定路径的文件</p><ul><li><p>参数</p><ul><li>{String} <code>path</code>: 文件路径</li></ul></li><li><p>返回值</p><ul><li>无</li></ul></li></ul><h2 id="urlencode-str" tabindex="-1"><a class="header-anchor" href="#urlencode-str" aria-hidden="true">#</a> UrlEncode(str)</h2><p>对给定字符串进行 URL 编码</p><ul><li><p>参数</p><ul><li>{String} <code>str</code>: 需要编码的字符串</li></ul></li><li><p>返回值</p><ul><li>{String} URL 编码后的字符串</li></ul></li></ul><h2 id="urldecode-str" tabindex="-1"><a class="header-anchor" href="#urldecode-str" aria-hidden="true">#</a> UrlDecode(str)</h2><p>对给定字符串进行 URL 解码</p><ul><li><p>参数</p><ul><li>{String} <code>str</code>: 需要解码的字符串</li></ul></li><li><p>返回值</p><ul><li>{String} URL 解码后的字符串</li></ul></li></ul><h2 id="globalmatch-haystack-needleregex-startingpos-1" tabindex="-1"><a class="header-anchor" href="#globalmatch-haystack-needleregex-startingpos-1" aria-hidden="true">#</a> globalMatch(Haystack, NeedleRegEx, StartingPos := 1)</h2><p>从给定字符串的指定起始位置处查找符合正则表达式的所有子字符串，即正则全局模式</p>',11),x={href:"https://orz707.gitee.io/v2/docs/commands/RegExMatch.htm",target:"_blank",rel:"noopener noreferrer"},S=l("li",null,[l("p",null,"参数"),l("ul",null,[l("li",null,[e("{String} "),l("code",null,"Haystack"),e(": 给定字符串")]),l("li",null,[e("{RegExp} "),l("code",null,"NeedleRegEx"),e(": 正则表达式对象")]),l("li",null,[e("{Number} "),l("code",null,"StartingPos"),e(": 起始位置，默认为 1")])])],-1),A=l("p",null,"返回值",-1),k={href:"https://orz707.gitee.io/v2/docs/commands/RegExMatch.htm#MatchObject",target:"_blank",rel:"noopener noreferrer"},v=a(`<h2 id="jxon-load-src-args" tabindex="-1"><a class="header-anchor" href="#jxon-load-src-args" aria-hidden="true">#</a> Jxon_Load(src, args*)</h2><p>将给定 JSON 文本数据加载成为 AutoHotkey 变量</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>对象转换后都会变成 Map 类型</p></div><ul><li><p>参数</p><ul><li>{String} <code>src</code>: JSON 文本的引用（因为 AHK 中没有传递引用的概念）</li><li><code>args</code>：额外参数列表，需要则查看 <code>src\\Utils\\JXON.ah2</code> 源码</li></ul></li><li><p>返回值</p><ul><li>AutoHotkey 变量</li></ul></li></ul><h2 id="jxon-dump-obj-indent-lvl-1" tabindex="-1"><a class="header-anchor" href="#jxon-dump-obj-indent-lvl-1" aria-hidden="true">#</a> Jxon_Dump(obj, indent := &quot;&quot;, lvl := 1)</h2><p>将给定的 AutoHotkey 变量转换为 JSON 文本</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>不支持 Object 类型，请使用 Map 类型代替</p></div><ul><li><p>参数</p><ul><li>{*} <code>obj</code>：需要转换的 AutoHotkey 变量</li><li>{String} <code>indent</code>：缩进用的字符串，默认为空字符串</li><li>{Number} <code>lvl</code>：当前递归的深度，默认为 1</li></ul></li><li><p>返回值</p><ul><li>{String} 转换后的 JSON 文本</li></ul></li></ul><h2 id="winhttp-args" tabindex="-1"><a class="header-anchor" href="#winhttp-args" aria-hidden="true">#</a> WinHttp(args*)</h2><p>参考 WinHttp 库函数源码，<code>src\\Utils\\WinHttp.ah2</code></p><ul><li><p>参数</p><ul><li><code>args</code>：参数列表，根据不同的请求类型和参数，具体参数需要参考文档说明</li></ul></li><li><p>返回值</p><ul><li>{WinHttp} WinHttp 对象</li></ul></li></ul><h2 id="associatedhicon-filepath" tabindex="-1"><a class="header-anchor" href="#associatedhicon-filepath" aria-hidden="true">#</a> associatedHIcon(filePath)</h2><p>获取 Windows 中与指定文件关联的图标，并返回一个 hICON 句柄</p><ul><li><p>参数</p><ul><li>{String} <code>filePath</code>：需要获取关联图标的文件路径</li></ul></li><li><p>返回值</p><ul><li>{Int} 获取到的关联图标的 HICON 句柄</li></ul></li></ul><h2 id="tip-title-content-time-unique-false" tabindex="-1"><a class="header-anchor" href="#tip-title-content-time-unique-false" aria-hidden="true">#</a> tip(title, content, time?, unique := false)</h2><p>在右下角弹出一条 <code>WiseGui</code> 通知，可设置标题、内容、计时消失时间、是否唯一，返回该通知的 id</p><ul><li><p>参数</p><ul><li>{String} <code>title</code>：通知标题</li><li>{String} <code>content</code>：通知内容</li><li>{Number} <code>time</code>：计时消失时间（单位为毫秒），选填，默认为 0，表示不消失</li><li>{Boolean} <code>unique</code>：是否保证唯一（即同一时刻只有一条弹窗），选填，默认为 false</li></ul></li><li><p>返回值</p><ul><li>{String} 该通知窗口的 id（如果 <code>unique</code> 为 true，则返回 A_TickCount 值作为 id）</li></ul></li></ul><h2 id="quicksort-arr-fn" tabindex="-1"><a class="header-anchor" href="#quicksort-arr-fn" aria-hidden="true">#</a> quickSort(arr, fn)</h2><p>对给定的数组进行<strong>快速排序</strong>（不生成副本），并返回排序后的数组</p><div class="language-ahk line-numbers-mode" data-ext="ahk"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">; 升序排序示例</span></span>
<span class="line"><span style="color:#E06C75;">arr</span><span style="color:#56B6C2;">:=</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#61AFEF;">QuickSort</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>参数</p><ul><li><code>arr</code>：待排序数组</li><li><code>fn</code>：比较函数，接受两个参数 itemA 和 itemB，返回值为数字类型，表示 itemA 和 itemB 的大小关系。如果 itemA 大于 itemB，返回正数；如果 itemA 小于 itemB，返回负数；如果 itemA 等于 itemB，返回 0。</li></ul></li><li><p>返回值</p><ul><li>排序后的数组</li></ul></li></ul>`,21);function F(C,E){const i=s("ExternalLinkIcon");return n(),r("div",null,[d,l("ul",null,[l("li",null,[p,l("ul",null,[u,l("li",null,[e("{String} "),h,e(": 工作目录，见"),l("a",f,[e("Run / RunWait - 语法 & 使用 | AutoHotkey v2"),t(i)])]),l("li",null,[e("{String} "),g,e(": 见"),l("a",m,[e("Run / RunWait - 语法 & 使用 | AutoHotkey v2"),t(i)])]),l("li",null,[e("{"),l("a",b,[e("Closure"),t(i)]),e("} "),_,e(": 运行文件前执行的处理函数")])])]),B]),y,l("p",null,[e("参数可以参考"),l("a",x,[e("RegExMatch - 语法 & 使用 | AutoHotkey v2"),t(i)])]),l("ul",null,[S,l("li",null,[A,l("ul",null,[l("li",null,[e("{Array} 匹配对象数组，参考"),l("a",k,[e("匹配对象 - MatchObject"),t(i)])])])])]),v])}const H=o(c,[["render",F],["__file","other.html.vue"]]);export{H as default};
