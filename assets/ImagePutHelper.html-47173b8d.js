import{_ as r,W as d,X as p,Y as e,Z as i,$ as a,a1 as t,a0 as g,C as u}from"./framework-c8ebc670.js";const c={},m=e("div",{class:"hint-container warning"},[e("p",{class:"hint-container-title"},"注意"),e("p",null,"本文内容列举翻译API内容，仅供参考。")],-1),n=e("p",null,"具体使用请参考：",-1),h={href:"https://www.autoahk.com/archives/37246",target:"_blank",rel:"noopener noreferrer"},s=g('<h2 id="imageputbase64-image-extension-quality" tabindex="-1"><a class="header-anchor" href="#imageputbase64-image-extension-quality" aria-hidden="true">#</a> ImagePutBase64(image, extension := &quot;&quot;, quality := &quot;&quot;)</h2><p>将图像转换为指定格式的文件并且返回一个Base64编码的字符串。</p><ul><li><p>参数</p><ul><li>{Image} <code>image</code>: 需要被转换的图像</li><li>{String} <code>extension</code>: 文件格式, 选项为: <code>bmp</code>, <code>gif</code>, <code>jpg</code>, <code>png</code>, <code>tiff</code></li><li>{String} <code>quality</code>: <code>jpg</code>文件质量的等级，整数类型，0-100</li></ul></li><li><p>返回值</p><ul><li>{String} Base64编码的字符串</li></ul></li></ul><h2 id="imageputbitmap-image" tabindex="-1"><a class="header-anchor" href="#imageputbitmap-image" aria-hidden="true">#</a> ImagePutBitmap(image)</h2><p>将图像转换为一个GDI+位图并且返回一个指针。</p><ul><li><p>参数</p><ul><li>{Image} <code>image</code>: 需要被转换的图像</li></ul></li><li><p>返回值</p><ul><li>{Pointer} GDI+位图的指针</li></ul></li></ul><h2 id="imageputbuffer-image" tabindex="-1"><a class="header-anchor" href="#imageputbuffer-image" aria-hidden="true">#</a> ImagePutBuffer(image)</h2><p>将图像转换为一个GDI+位图并且返回一个包含GDI+作用域的缓冲区对象。</p><ul><li><p>参数</p><ul><li>{Image} <code>image</code>: 需要被转换的图像</li></ul></li><li><p>返回值</p><ul><li>{BitmapBuffer} 包含GDI+作用域的缓冲区对象</li></ul></li></ul><h2 id="imageputclipboard-image" tabindex="-1"><a class="header-anchor" href="#imageputclipboard-image" aria-hidden="true">#</a> ImagePutClipboard(image)</h2><p>将图像复制到剪贴板并且返回剪贴板的所有内容。</p><ul><li><p>参数</p><ul><li>{Image} <code>image</code>: 需要被复制的图像</li></ul></li><li><p>返回值</p><ul><li>{String} 包含剪贴板的所有内容的字符串</li></ul></li></ul><h2 id="imageputcursor-image-xhotspot-yhotspot" tabindex="-1"><a class="header-anchor" href="#imageputcursor-image-xhotspot-yhotspot" aria-hidden="true">#</a> ImagePutCursor(image, xHotspot := &quot;&quot;, yHotspot := &quot;&quot;)</h2><p>将图像设为光标并且返回变量A_Cursor。</p><ul><li><p>参数</p><ul><li>{Image} <code>image</code>: 需要被设为光标的图像</li><li>{String} <code>xHotspot</code>: X点击点，范围为0-width。</li><li>{String} <code>yHotspot</code>: Y点击点，范围为0-height。</li></ul></li><li><p>返回值</p><ul><li>{Variable} 变量A_Cursor</li></ul></li></ul><h2 id="imageputdc-image-alpha" tabindex="-1"><a class="header-anchor" href="#imageputdc-image-alpha" aria-hidden="true">#</a> ImagePutDC(image, alpha := &quot;&quot;)</h2><p>将图像放到设备上下文并且返回句柄。</p><ul><li><p>参数</p><ul><li>{Image} <code>image</code>: 需要被放到设备上下文的图像</li><li>{String} <code>alpha</code>: Alpha通道的颜色，RGB格式，例如 0xFFFFFF。</li></ul></li><li><p>返回值</p><ul><li>{Handle} 句柄</li></ul></li></ul><h2 id="imageputdesktop-image" tabindex="-1"><a class="header-anchor" href="#imageputdesktop-image" aria-hidden="true">#</a> ImagePutDesktop(image)</h2><p>将图像放在桌面图标后面并且返回字符串&quot;desktop&quot;。</p><ul><li><p>参数</p><ul><li>{Image} <code>image</code>: 需要被放在桌面图标后面的图像</li></ul></li><li><p>返回值</p><ul><li>{String} &quot;desktop&quot;</li></ul></li></ul><h2 id="imageputexplorer-image-default" tabindex="-1"><a class="header-anchor" href="#imageputexplorer-image-default" aria-hidden="true">#</a> ImagePutExplorer(image, default := &quot;&quot;)</h2><p>将图像保存在最近活动的文件浏览器窗口中。</p><ul><li>参数 <ul><li>{Image} <code>image</code>: 需要被保存最近活动的文件浏览器窗口中的图像</li><li>{String} <code>default</code>: 默认路径选项。</li></ul></li></ul><h2 id="imageputfile-image-filepath-quality" tabindex="-1"><a class="header-anchor" href="#imageputfile-image-filepath-quality" aria-hidden="true">#</a> ImagePutFile(image, filepath := &quot;&quot;, quality := &quot;&quot;)</h2><p>将图像保存为文件并返回文件路径。</p><ul><li><p>参数</p><ul><li>{Object} <code>image</code>: 要保存的图像对象。</li><li>{String} <code>filepath</code>: 文件路径和扩展名，默认为空字符串 | string -&gt; *.bmp, *.gif, *.jpg, *.png, *.tiff</li><li>{Number} <code>quality</code>: JPEG 图像质量等级，默认为空字符串 | integer -&gt; 0 - 100</li></ul></li><li><p>返回值</p><ul><li>{String} 文件路径字符串。</li></ul></li></ul><h2 id="imageputformdata-image-boundary-imageput-abcdef" tabindex="-1"><a class="header-anchor" href="#imageputformdata-image-boundary-imageput-abcdef" aria-hidden="true">#</a> ImagePutFormData(image, boundary := &quot;ImagePut-abcdef&quot;)</h2><p>将图像以多部分表单数据的形式返回二进制 SafeArray COM 对象。</p><ul><li><p>参数</p><ul><li>{Object} <code>image</code>: 图像对象。</li><li>{String} <code>boundary</code>: 内容类型，默认为 &quot;ImagePut-abcdef&quot;。</li></ul></li><li><p>返回值</p><ul><li>{Object} 返回图像的二进制 SafeArray COM 对象。</li></ul></li></ul><h2 id="imageputhbitmap-image-alpha" tabindex="-1"><a class="header-anchor" href="#imageputhbitmap-image-alpha" aria-hidden="true">#</a> ImagePutHBitmap(image, alpha := &quot;&quot;)</h2><p>将图像保存为设备无关位图，并返回句柄。</p><ul><li><p>参数</p><ul><li>{Object} <code>image</code>: 要保存的图像对象。</li><li>{String} <code>alpha</code>: 在 Alpha 通道中的颜色（rgb 值），默认为空字符串。 | RGB -&gt; 0xFFFFFF</li></ul></li><li><p>返回值</p><ul><li>{Number} 设备无关位图处理后的句柄。</li></ul></li></ul><h2 id="imageputhex-image-extension-quality" tabindex="-1"><a class="header-anchor" href="#imageputhex-image-extension-quality" aria-hidden="true">#</a> ImagePutHex(image, extension := &quot;&quot;, quality := &quot;&quot;)</h2><p>将图像保存为文件格式，并返回十六进制编码字符串。</p><ul><li><p>参数</p><ul><li>{Object} <code>image</code>: 要保存的图像对象。</li><li>{String} <code>extension</code>: 文件格式编码，默认为空字符串。 | string -&gt; bmp, gif, jpg, png, tiff</li><li>{Number} <code>quality</code>: JPEG 图像质量等级，默认为空字符串。 | integer -&gt; 0 - 100</li></ul></li><li><p>返回值</p><ul><li>{String} 十六进制编码字符串。</li></ul></li></ul><h2 id="imageputhicon-image" tabindex="-1"><a class="header-anchor" href="#imageputhicon-image" aria-hidden="true">#</a> ImagePutHIcon(image)</h2><p>将图像处理为图标，并返回句柄。</p><ul><li><p>参数</p><ul><li>{Object} <code>image</code>: 要进行处理的图像对象。</li></ul></li><li><p>返回值</p><ul><li>{Number} 图标处理成功后的句柄。</li></ul></li></ul><h2 id="imageputrandomaccessstream-image-extension-quality" tabindex="-1"><a class="header-anchor" href="#imageputrandomaccessstream-image-extension-quality" aria-hidden="true">#</a> ImagePutRandomAccessStream(image, extension := &quot;&quot;, quality := &quot;&quot;)</h2><p>将图像保存为文件格式，并返回指向 RandomAccessStream 的指针。</p><ul><li><p>参数</p><ul><li>{Object} <code>image</code>: 要进行处理的图像对象。</li><li>{String} <code>extension</code>: 文件格式编码，默认为空字符串。 | string -&gt; bmp, gif, jpg, png, tiff</li><li>{Number} <code>quality</code>: JPEG 图像质量等级，默认为空字符串。 | integer -&gt; 0 - 100</li></ul></li><li><p>返回值</p><ul><li>{Object} RandomAccessStream 指针。</li></ul></li></ul><h2 id="imageputsafearray-image-extension-quality" tabindex="-1"><a class="header-anchor" href="#imageputsafearray-image-extension-quality" aria-hidden="true">#</a> ImagePutSafeArray(image, extension := &quot;&quot;, quality := &quot;&quot;)</h2><p>将图像保存为文件格式，并返回 SafeArray COM 对象。</p><ul><li><p>参数</p><ul><li>{Object} <code>image</code>: 要进行处理的图像对象。</li><li>{String} <code>extension</code>: 文件格式编码，默认为空字符串。 | string -&gt; bmp, gif, jpg, png, tiff</li><li>{Number} <code>quality</code>: JPEG 图像质量等级，默认为空字符串。 | integer -&gt; 0 - 100</li></ul></li><li><p>返回值</p><ul><li>{Object} SafeArray COM 对象。</li></ul></li></ul><h2 id="imageputscreenshot-image-screenshot-alpha" tabindex="-1"><a class="header-anchor" href="#imageputscreenshot-image-screenshot-alpha" aria-hidden="true">#</a> ImagePutScreenshot(image, screenshot := &quot;&quot;, alpha := &quot;&quot;)</h2><p>将图像放置在共享屏幕设备上，并返回坐标数组。</p><ul><li><p>参数</p><ul><li>{Object} <code>image</code>: 要进行处理的图像对象。</li><li>{String} <code>screenshot</code>: 屏幕坐标数组，默认为空字符串。 | array -&gt; [x,y,w,h] or [0,0]</li><li>{String} <code>alpha</code>: 在 Alpha 通道中的颜色（rgb 值），默认为空字符串。 | RGB -&gt; 0xFFFFFF</li></ul></li><li><p>返回值</p><ul><li>{Array} 坐标数组。</li></ul></li></ul><h2 id="imageputstream-image-extension-quality" tabindex="-1"><a class="header-anchor" href="#imageputstream-image-extension-quality" aria-hidden="true">#</a> ImagePutStream(image, extension := &quot;&quot;, quality := &quot;&quot;)</h2><p>将图像保存为文件格式，并返回指向 stream 的指针。</p><ul><li><p>参数</p><ul><li>{Object} <code>image</code>: 要进行处理的图像对象。</li><li>{String} <code>extension</code>: 文件格式编码，默认为空字符串。 | string -&gt; bmp, gif, jpg, png, tiff</li><li>{Number} <code>quality</code>: JPEG 图像质量等级，默认为空字符串。 | integer -&gt; 0 - 100</li></ul></li><li><p>返回值</p><ul><li>{Object} stream 指针。</li></ul></li></ul><h2 id="imageputuri-image-extension-quality" tabindex="-1"><a class="header-anchor" href="#imageputuri-image-extension-quality" aria-hidden="true">#</a> ImagePutURI(image, extension := &quot;&quot;, quality := &quot;&quot;)</h2><p>将图像保存为文件格式，并返回 URI 字符串。</p><ul><li><p>参数</p><ul><li>{Object} <code>image</code>: 要进行处理的图像对象。</li><li>{String} <code>extension</code>: 文件格式编码，默认为空字符串。 | string -&gt; bmp, gif, jpg, png, tiff</li><li>{Number} <code>quality</code>: JPEG 图像质量等级，默认为空字符串。 | integer -&gt; 0 - 100</li></ul></li><li><p>返回值</p><ul><li>{String} URI 字符串。</li></ul></li></ul><h2 id="imageputwallpaper-image" tabindex="-1"><a class="header-anchor" href="#imageputwallpaper-image" aria-hidden="true">#</a> ImagePutWallpaper(image)</h2><p>将图像作为桌面壁纸，并返回字符串 &quot;wallpaper&quot;。</p><ul><li><p>参数</p><ul><li>{Object} <code>image</code>: 要进行处理的图像对象。</li></ul></li><li><p>返回值</p><ul><li>{String} &quot;wallpaper&quot; 字符串。</li></ul></li></ul><h2 id="imageputwicbitmap-image" tabindex="-1"><a class="header-anchor" href="#imageputwicbitmap-image" aria-hidden="true">#</a> ImagePutWICBitmap(image)</h2><p>将图像处理为 WICBitmap，并返回接口指针。</p><ul><li><p>参数</p><ul><li>{Object} <code>image</code>: 要进行处理的图像对象。</li></ul></li><li><p>返回值</p><ul><li>{Object} WICBitmap 接口指针。</li></ul></li></ul><h2 id="imageputwindow-image-title-pos-style-0x82c80000-styleex-0x9-parent" tabindex="-1"><a class="header-anchor" href="#imageputwindow-image-title-pos-style-0x82c80000-styleex-0x9-parent" aria-hidden="true">#</a> ImagePutWindow(image, title := &quot;&quot;, pos := &quot;&quot;, style := 0x82C80000, styleEx := 0x9, parent := &quot;&quot;)</h2><p>将图像放置在窗口中并返回窗口句柄。</p><ul><li><p>参数</p><ul><li>{Object} <code>image</code>: 要进行处理的图像对象。</li><li>{String} <code>title</code>: 窗口标题，默认为空字符串。</li><li>{String} <code>pos</code>: 窗口坐标数组，默认为空字符串。 | array -&gt; [x,y,w,h] or [0,0]</li><li>{Number} <code>style</code>: 窗口样式，默认为 0x82C80000。</li><li>{Number} <code>styleEx</code>: 窗口附加样式，默认为 0x9.</li><li>{Object} <code>parent</code>: 窗口父对象，默认为空字符串。</li></ul></li><li><p>返回值</p><ul><li>{Number} 窗口句柄。</li></ul></li></ul><h2 id="imageshow-image-title-pos-style-0x90000000-styleex-0x80088-parent" tabindex="-1"><a class="header-anchor" href="#imageshow-image-title-pos-style-0x90000000-styleex-0x80088-parent" aria-hidden="true">#</a> ImageShow(image, title := &quot;&quot;, pos := &quot;&quot;, style := 0x90000000, styleEx := 0x80088, parent := &quot;&quot;)</h2><p>在窗口中显示图像，并返回窗口句柄。</p><ul><li><p>参数</p><ul><li>{Object} <code>image</code>: 要进行处理的图像对象。</li><li>{String} <code>title</code>: 窗口标题，默认为空字符串。</li><li>{String} <code>pos</code>: 窗口坐标数组，默认为空字符串。 | array -&gt; [x,y,w,h] or [0,0]</li><li>{Number} <code>style</code>: 窗口样式，默认为 0x90000000。</li><li>{Number} <code>styleEx</code>: 窗口附加样式，默认为 0x80088.</li><li>{Object} <code>parent</code>: 窗口父对象，默认为空字符串。</li></ul></li><li><p>返回值</p><ul><li>{Number} 窗口句柄。</li></ul></li></ul><h2 id="imagedestroy-image" tabindex="-1"><a class="header-anchor" href="#imagedestroy-image" aria-hidden="true">#</a> ImageDestroy(image)</h2><p>销毁图像对象。</p><ul><li><p>参数</p><ul><li>{Object} <code>image</code>: 要进行销毁的图像对象。</li></ul></li><li><p>返回值</p><ul><li>无返回值。</li></ul></li></ul><h2 id="imagewidth-image" tabindex="-1"><a class="header-anchor" href="#imagewidth-image" aria-hidden="true">#</a> ImageWidth(image)</h2><p>获取图像的宽度。</p><ul><li><p>参数</p><ul><li>{Object} <code>image</code>: 要获取宽度的图像对象。</li></ul></li><li><p>返回值</p><ul><li>{Number} 图像的宽度。</li></ul></li></ul><h2 id="imageheight-image" tabindex="-1"><a class="header-anchor" href="#imageheight-image" aria-hidden="true">#</a> ImageHeight(image)</h2><p>获取图像的高度。</p><ul><li><p>参数</p><ul><li>{Object} <code>image</code>: 要获取高度的图像对象。</li></ul></li><li><p>返回值</p><ul><li>{Number} 图像的高度。</li></ul></li></ul>',75);function b(x,q){const o=u("ExternalLinkIcon"),l=u("RouterLink");return d(),p("div",null,[m,n,e("ul",null,[e("li",null,[e("a",h,[i("简单、高效、实用的图片操作库 - AutoAHK"),a(o)])]),e("li",null,[a(l,{to:"/dev/others/image-put-doc-1.html"},{default:t(()=>[i("ImagePut —— 裁剪、缩放 & 其他选项")]),_:1})]),e("li",null,[a(l,{to:"/dev/others/image-put-doc-2.html"},{default:t(()=>[i("ImagePut —— 输入类型 & 输出函数")]),_:1})])]),s])}const y=r(c,[["render",b],["__file","ImagePutHelper.html.vue"]]);export{y as default};
